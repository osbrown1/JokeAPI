GOAL: Funcionality that allows the user to search for games by title/genre and recieve suggestions

Apis we might want to use

Publisher Apis (Has documentation)
https://partner.steam-api.com/ISteamPublishedItemSearch/ResultSetSummary/v1/?steamid=35456354242243344

Search API
https://steamapi.xpaw.me/#ISteamUserOAuth/Search

Suggestion Apis
https://steamapi.xpaw.me/#IDOTA2CustomGames_570/GetSuggestedGames
https://api.steampowered.com/IDOTA2CustomGames_570/GetPopularGames/v1/


Search Suggestions
https://api.steampowered.com/IStoreQueryService/SearchSuggestions/v1/

Recently Played
https://api.steampowered.com/IPlayerService/GetRecentlyPlayedGames/v1/


Problems:

-Implementing a class object so we can export/import properly
-




import 'bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';
import './css/styles.css';

// Business Logic

import 'bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';
import './css/styles.css';
import WeatherService from './weather-service.js';

// Business Logic

//index.js
async function getWeather(city) {
  const response = await WeatherService.getWeather(city);
  if (response.main) {
    printElements(response, city);
  } else {
    printError(response, city);
  }
}

// UI Logic

function printElements(response, city) {
  document.querySelector('#showResponse').innerText = `The humidity in ${city} is ${response.main.humidity}%.
  The temperature in Kelvins is ${response.main.temp} degrees.`;
}

function printError(error, city) {
  document.querySelector('#showResponse').innerText = `There was an error accessing the weather data for ${city}: 
  ${error}.`;
}

function handleFormSubmission(event) {
  event.preventDefault();
  const city = document.querySelector('#location').value;
  document.querySelector('#location').value = null;
  getWeather(city);
}

window.addEventListener("load", function() {
  document.querySelector('form').addEventListener("submit", handleFormSubmission);
});

//weather.js (steam.js)
export default class WeatherService {  
  static async getWeather(city) {
    try {
      const response = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.API_KEY}`);
      const jsonifiedResponse = await response.json();
      if (!response.ok) {
        const errorMessage = `${response.status} ${response.statusText}
        ${jsonifiedResponse.message}`;
        throw new Error(errorMessage);
      }
      return jsonifiedResponse;
    } catch(error) {
      return error;
    }
  }
}


//Dino-ipsum Promise
export default class Dinos {
  static dinoIpsum(word) {
    return new Promise(function(resolve, reject) {
    let request = new XMLHttpRequest();
    const url = `https://dinoipsum.com/api/?format=json&words=1&paragraphs=1`;

    request.addEventListener('loadend', function() {
      const response = JSON.parse(this.responseText);
      console.log(response[0][0] + ' - response')
      if (this.status === 200) {
        resolve([response, word])
      } else {
        reject([this, response, word])
      }
    });
    request.open("GET", url, true);
    request.send();
  });
}
}


//WeatherService
function getWeather(city) {
  let request = new XMLHttpRequest();
  const url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.API_KEY}&`;
  
  request.addEventListener("loadend", function() {
    try {
      const response = JSON.parse(this.responseText);
      if (this.status === 200) {
        printElements(response, city);
      } else {
        throw Error("Status Error");
        // printError(this, city);
      }
    } catch(error) {
      /* eslint-disable no-console */
      console.error(`Red Alert: There is an error: ${error.message}`);
      /* eslint-enable no-console */
      printError(this, city);
    }
  });

  request.open("GET", url, true);
  request.send();
}

//from Giphy
// function printError(error) {
//   document.querySelector(
//     "#showResults"
//   ).innerText = `${error[2]}: ${error[0].status} ${error[0].statusText}: ${error[1].message}`;
// }